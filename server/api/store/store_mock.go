// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/store/store.go

// Package store is a generated GoMock package.
package store

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/iii-ishida/workrec/server/api/model"
	event "github.com/iii-ishida/workrec/server/event"
	reflect "reflect"
	time "time"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// RunInTransaction mocks base method
func (m *MockStore) RunInTransaction(arg0 func(Store) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTransaction indicates an expected call of RunInTransaction
func (mr *MockStoreMockRecorder) RunInTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockStore)(nil).RunInTransaction), arg0)
}

// PutEvent mocks base method
func (m *MockStore) PutEvent(e event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvent", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutEvent indicates an expected call of PutEvent
func (mr *MockStoreMockRecorder) PutEvent(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvent", reflect.TypeOf((*MockStore)(nil).PutEvent), e)
}

// GetEvents mocks base method
func (m *MockStore) GetEvents(userID string, lastConstructedAt time.Time, pageSize int, pageToken string, dst *[]event.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", userID, lastConstructedAt, pageSize, pageToken, dst)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockStoreMockRecorder) GetEvents(userID, lastConstructedAt, pageSize, pageToken, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockStore)(nil).GetEvents), userID, lastConstructedAt, pageSize, pageToken, dst)
}

// GetWork mocks base method
func (m *MockStore) GetWork(id string, dst *model.Work) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWork", id, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWork indicates an expected call of GetWork
func (mr *MockStoreMockRecorder) GetWork(id, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockStore)(nil).GetWork), id, dst)
}

// PutWork mocks base method
func (m *MockStore) PutWork(arg0 model.Work) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutWork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutWork indicates an expected call of PutWork
func (mr *MockStoreMockRecorder) PutWork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWork", reflect.TypeOf((*MockStore)(nil).PutWork), arg0)
}

// DeleteWork mocks base method
func (m *MockStore) DeleteWork(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWork", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWork indicates an expected call of DeleteWork
func (mr *MockStoreMockRecorder) DeleteWork(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWork", reflect.TypeOf((*MockStore)(nil).DeleteWork), id)
}

// GetWorkList mocks base method
func (m *MockStore) GetWorkList(userID string, pageSize int, pageToken string, dst *[]model.WorkListItem) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkList", userID, pageSize, pageToken, dst)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkList indicates an expected call of GetWorkList
func (mr *MockStoreMockRecorder) GetWorkList(userID, pageSize, pageToken, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkList", reflect.TypeOf((*MockStore)(nil).GetWorkList), userID, pageSize, pageToken, dst)
}

// GetWorkListItem mocks base method
func (m *MockStore) GetWorkListItem(id string, dst *model.WorkListItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkListItem", id, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWorkListItem indicates an expected call of GetWorkListItem
func (mr *MockStoreMockRecorder) GetWorkListItem(id, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkListItem", reflect.TypeOf((*MockStore)(nil).GetWorkListItem), id, dst)
}

// PutWorkListItem mocks base method
func (m *MockStore) PutWorkListItem(arg0 model.WorkListItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutWorkListItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutWorkListItem indicates an expected call of PutWorkListItem
func (mr *MockStoreMockRecorder) PutWorkListItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWorkListItem", reflect.TypeOf((*MockStore)(nil).PutWorkListItem), arg0)
}

// DeleteWorkListItem mocks base method
func (m *MockStore) DeleteWorkListItem(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkListItem", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkListItem indicates an expected call of DeleteWorkListItem
func (mr *MockStoreMockRecorder) DeleteWorkListItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkListItem", reflect.TypeOf((*MockStore)(nil).DeleteWorkListItem), id)
}

// GetLastConstructedAt mocks base method
func (m *MockStore) GetLastConstructedAt(id string, dst *model.LastConstructedAt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastConstructedAt", id, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLastConstructedAt indicates an expected call of GetLastConstructedAt
func (mr *MockStoreMockRecorder) GetLastConstructedAt(id, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastConstructedAt", reflect.TypeOf((*MockStore)(nil).GetLastConstructedAt), id, dst)
}

// PutLastConstructedAt mocks base method
func (m *MockStore) PutLastConstructedAt(arg0 model.LastConstructedAt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLastConstructedAt", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLastConstructedAt indicates an expected call of PutLastConstructedAt
func (mr *MockStoreMockRecorder) PutLastConstructedAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLastConstructedAt", reflect.TypeOf((*MockStore)(nil).PutLastConstructedAt), arg0)
}

// Close mocks base method
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}
