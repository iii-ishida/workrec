// Mocks generated by Mockito 5.0.14 from annotations
// in workrec_app/test_goldens/task_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:workrec/src/models/models.dart' as _i2;
import 'package:workrec/src/repositories/task/task_repo.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTask_0 extends _i1.Fake implements _i2.Task {}

/// A class which mocks [TaskListRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskListRepo extends _i1.Mock implements _i3.TaskListRepo {
  MockTaskListRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: '')
          as String);
  @override
  _i4.Future<_i2.Task> findTaskById(String? taskId) =>
      (super.noSuchMethod(Invocation.method(#findTaskById, [taskId]),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Stream<_i2.TaskRecorder> taskRecorder() =>
      (super.noSuchMethod(Invocation.method(#taskRecorder, []),
              returnValue: Stream<_i2.TaskRecorder>.empty())
          as _i4.Stream<_i2.TaskRecorder>);
  @override
  _i4.Future<void> addNewTask(_i2.TaskRecorder? recorder, String? title) =>
      (super.noSuchMethod(Invocation.method(#addNewTask, [recorder, title]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> recordStartTimeOfTask(
          _i2.TaskRecorder? recorder, String? taskId) =>
      (super.noSuchMethod(
          Invocation.method(#recordStartTimeOfTask, [recorder, taskId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> recordSuspendTimeOfTask(
          _i2.TaskRecorder? recorder, String? taskId) =>
      (super.noSuchMethod(
          Invocation.method(#recordSuspendTimeOfTask, [recorder, taskId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> recordResumeTimeOfTask(
          _i2.TaskRecorder? recorder, String? taskId) =>
      (super.noSuchMethod(
          Invocation.method(#recordResumeTimeOfTask, [recorder, taskId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
