version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.13.0
  cloudrun: circleci/gcp-cloud-run@1.0.2
jobs:
  server-test-and-deploy:
    docker:
      - image: cimg/elixir:1.11.3
        environment:
          MIX_ENV: test

    working_directory: ~/workrec

    steps:
      - checkout

      - run: cd server && mix local.hex --force
      - run: cd server && mix local.rebar --force

      - restore_cache:
          keys:
            - v2-mix-cache-{{ .Branch }}-{{ checksum "server/mix.lock" }}
      - restore_cache:
          keys:
            - v2-build-cache-{{ .Branch }}
            - v2-build-cache
      - restore_cache:
          keys:
            - v3-plt-cache-{{ checksum "server/mix.lock" }}
            - v3-plt-cache

      - run:
          no_output_timeout: 30m
          command: cd server && mkdir -p priv/plts && MIX_ENV=dev mix do deps.get, compile, dialyzer --plt
      - save_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "server/mix.lock" }}
          paths: "server/deps"
      - save_cache:
          key: v2-build-cache-{{ .Branch }}
          paths: "server/_build"
      - save_cache:
          key: v2-build-cache
          paths: "server/_build"
      - save_cache:
          key: v3-plt-cache-{{ checksum "server/mix.lock" }}
          paths: "server/priv/plts"
      - save_cache:
          key: v3-plt-cache
          paths: "server/priv/plts"


      - run:
          name: Run mix test
          no_output_timeout: 30m
          command: |
            cd server
            MIX_ENV=dev mix dialyzer && mix credo --strict && mix format --check-formatted && mix compile --warnings-as-errors && mix test

      - store_test_results:
          path: server/_build/test/lib/workrec

      - setup_remote_docker:
          docker_layer_caching: false

      - run:
          name: Deploy server
          command: |
            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV
            echo ${GCLOUD_SERVICE_KEY} | base64 --decode > $HOME/gcloud-service-key.json
            echo 'export GOOGLE_CLOUD_KEYS=$(cat $HOME/gcloud-service-key.json)' >> $BASH_ENV
            echo 'export TAG=${CIRCLE_SHA1}' >> $BASH_ENV && source $BASH_ENV
            cd server
            rm -rf ./priv/plts
            docker build --build-arg=CLIENT_ORIGIN=${CLIENT_ORIGIN} --build-arg=SECRET_KEY_BASE=$(mix phx.gen.secret) -t gcr.io/${GOOGLE_PROJECT_ID}/api-server:$TAG . > /dev/null 2>&1 && echo "build done."
      - gcp-gcr/gcr-auth:
          gcloud-service-key: GOOGLE_CLOUD_KEYS
          google-project-id: GOOGLE_PROJECT_ID
          google-compute-zone: GOOGLE_COMPUTE_ZONE
      - gcp-gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          registry-url: "gcr.io"
          image: ${GOOGLE_PROJECT_ID}/api-server
      - cloudrun/deploy:
          platform: "managed"
          image: "gcr.io/${GOOGLE_PROJECT_ID}/api-server:${TAG}"
          service-name: "api-server"
          region: $GOOGLE_COMPUTE_ZONE
          unauthenticated: true
          args: "GOOGLE_CLOUD_PROJECT=${GOOGLE_PROJECT_ID}, API_ORIGIN=${API_ORIGIN}, CLIENT_ORIGIN=${CLIENT_ORIGIN}"

  web-client-test-and-deploy:
    docker:
      - image: cimg/node:14.16.0-browsers

    working_directory: ~/workrec
    steps:
      - checkout

      - restore_cache:
          keys:
            - yarn-packages-{{ checksum "web-client/yarn.lock" }}

      - run: cd ./web-client && yarn install

      - save_cache:
          key: yarn-packages-{{ checksum "web-client/yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Run unit test
          command: |
            cd ./web-client
            sh ./scripts/build.sh && sh ./scripts/test.sh

      - run:
          name: Deploy client
          command: |
            sh ./web-client/scripts/build.sh && cd ./web-client && yarn run deploy --project=${GOOGLE_PROJECT_ID} --token=${FIREBASE_TOKEN} > /dev/null 2>&1 && echo "deploy done."

  android-client-test:
    working_directory: ~/workrec
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout

      - restore_cache:
          key: jars-{{ checksum "android-client/Workrec/build.gradle" }}-{{ checksum  "android-client/Workrec/app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: cd android-client/Workrec && ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/android-client/Workrec/.gradle
          key: jars-{{ checksum "android-client/Workrec/build.gradle" }}-{{ checksum  "android-client/Workrec/app/build.gradle" }}

      - run:
          name: Run Tests
          command: cd android-client/Workrec && ./gradlew lint test

      - store_artifacts:
          path: android-client/Workrec/app/build/reports
          destination: reports

      - store_test_results:
          path: android-client/Workrec/app/build/test-results

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - server-test-and-deploy
      - web-client-test-and-deploy
      - android-client-test
