"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""Date with time (isoformat)"""
scalar DateTime

type Mutation {
  createTask(title: String!): TaskNode!
  startWorkOnTask(taskId: String!, timestamp: DateTime!): TaskNode!
  stopWorkOnTask(taskId: String!, timestamp: DateTime!): TaskNode!
  completeTask(taskId: String!, timestamp: DateTime!): TaskNode!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

type Query {
  tasks(limit: Int = null, cursor: String = null): TasksConnection!
}

type TaskEdge {
  node: TaskNode!
}

type TaskNode {
  id: ID!
  title: String!
  totalWorkingTime: Int!
  lastWork: WorkSessionNode!
  state: String!
}

type TasksConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type WorkSessionNode {
  id: ID!
  startTime: DateTime!
  endTime: DateTime!
  workingTime: Int!
}
