// Code generated by MockGen. DO NOT EDIT.
// Source: ./worklist/store/store.go

// Package store is a generated GoMock package.
package store

import (
	gomock "github.com/golang/mock/gomock"
	event "github.com/iii-ishida/workrec/server/event"
	model "github.com/iii-ishida/workrec/server/worklist/model"
	reflect "reflect"
	time "time"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetWorks mocks base method
func (m *MockStore) GetWorks(pageSize int, pageToken string, dst *[]model.WorkListItem) (string, error) {
	ret := m.ctrl.Call(m, "GetWorks", pageSize, pageToken, dst)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorks indicates an expected call of GetWorks
func (mr *MockStoreMockRecorder) GetWorks(pageSize, pageToken, dst interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorks", reflect.TypeOf((*MockStore)(nil).GetWorks), pageSize, pageToken, dst)
}

// GetWork mocks base method
func (m *MockStore) GetWork(id string, dst *model.WorkListItem) error {
	ret := m.ctrl.Call(m, "GetWork", id, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWork indicates an expected call of GetWork
func (mr *MockStoreMockRecorder) GetWork(id, dst interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockStore)(nil).GetWork), id, dst)
}

// PutWork mocks base method
func (m *MockStore) PutWork(w model.WorkListItem) error {
	ret := m.ctrl.Call(m, "PutWork", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutWork indicates an expected call of PutWork
func (mr *MockStoreMockRecorder) PutWork(w interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWork", reflect.TypeOf((*MockStore)(nil).PutWork), w)
}

// DeleteWork mocks base method
func (m *MockStore) DeleteWork(id string) error {
	ret := m.ctrl.Call(m, "DeleteWork", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWork indicates an expected call of DeleteWork
func (mr *MockStoreMockRecorder) DeleteWork(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWork", reflect.TypeOf((*MockStore)(nil).DeleteWork), id)
}

// GetLastConstructedAt mocks base method
func (m *MockStore) GetLastConstructedAt(id string, dst *model.LastConstructedAt) error {
	ret := m.ctrl.Call(m, "GetLastConstructedAt", id, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLastConstructedAt indicates an expected call of GetLastConstructedAt
func (mr *MockStoreMockRecorder) GetLastConstructedAt(id, dst interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastConstructedAt", reflect.TypeOf((*MockStore)(nil).GetLastConstructedAt), id, dst)
}

// PutLastConstructedAt mocks base method
func (m *MockStore) PutLastConstructedAt(l model.LastConstructedAt) error {
	ret := m.ctrl.Call(m, "PutLastConstructedAt", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLastConstructedAt indicates an expected call of PutLastConstructedAt
func (mr *MockStoreMockRecorder) PutLastConstructedAt(l interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLastConstructedAt", reflect.TypeOf((*MockStore)(nil).PutLastConstructedAt), l)
}

// GetEvents mocks base method
func (m *MockStore) GetEvents(lastConstructedAt time.Time, pageSize int, pageToken string, dst *[]event.Event) (string, error) {
	ret := m.ctrl.Call(m, "GetEvents", lastConstructedAt, pageSize, pageToken, dst)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockStoreMockRecorder) GetEvents(lastConstructedAt, pageSize, pageToken, dst interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockStore)(nil).GetEvents), lastConstructedAt, pageSize, pageToken, dst)
}
