version: 2
jobs:
  server-test-and-deploy:
    docker:
      - image: circleci/elixir:1.9.4
        environment:
          MIX_ENV: test

    working_directory: ~/workrec

    steps:
      - checkout

      - run:
          name: Install gcloud
          command: |
            sudo apt-get install -qqy lsb-release && export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" && \
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - && \
            sudo apt-get update && sudo apt-get install google-cloud-sdk

      - run:
          name: Setup glcoud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet config set core/disable_usage_reporting true
            gcloud --quiet config set component_manager/disable_update_check true

      - run: cd server && mix local.hex --force
      - run: cd server && mix local.rebar --force

      - restore_cache:
          keys:
            - v2-mix-cache-{{ .Branch }}-{{ checksum "server/mix.lock" }}
      - restore_cache:
          keys:
            - v2-build-cache-{{ .Branch }}
            - v2-build-cache
      - restore_cache:
          keys:
            - v3-plt-cache-{{ checksum "server/mix.lock" }}
            - v3-plt-cache

      - run: cd server && mkdir -p priv/plts && MIX_ENV=dev mix do deps.get, compile, dialyzer --plt
      - save_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "server/mix.lock" }}
          paths: "server/deps"
      - save_cache:
          key: v2-build-cache-{{ .Branch }}
          paths: "server/_build"
      - save_cache:
          key: v2-build-cache
          paths: "server/_build"
      - save_cache:
          key: v3-plt-cache-{{ checksum "server/mix.lock" }}
          paths: "server/priv/plts"
      - save_cache:
          key: v3-plt-cache
          paths: "server/priv/plts"


      - run:
          name: Run mix test
          no_output_timeout: 30m
          command: |
            cd server
            MIX_ENV=dev mix dialyzer && mix credo --strict && mix format --check-formatted && mix compile --warnings-as-errors && mix test

      - store_test_results:
          path: server/_build/test/lib/workrec

      - setup_remote_docker:
          docker_layer_caching: false

      - run:
          name: Deploy server
          command: |
            cd server
            rm -rf ./priv/plts
            TAG=v0.1.$CIRCLE_BUILD_NUM
            gcloud auth configure-docker --quiet
            docker build --build-arg=CLIENT_ORIGIN=${CLIENT_ORIGIN} --build-arg=SECRET_KEY_BASE=$(mix phx.gen.secret) -t gcr.io/${GOOGLE_PROJECT_ID}/api-server:$TAG . > /dev/null 2>&1 && echo "build done."
            docker push gcr.io/${GOOGLE_PROJECT_ID}/api-server:$TAG > /dev/null 2>&1 && echo "push done."
            gcloud run deploy api-server --quiet \
                                         --image gcr.io/${GOOGLE_PROJECT_ID}/api-server:$TAG \
                                         --platform managed \
                                         --region asia-northeast1 \
                                         --set-env-vars "GOOGLE_CLOUD_PROJECT=${GOOGLE_PROJECT_ID}, API_ORIGIN=${API_ORIGIN}, CLIENT_ORIGIN=${CLIENT_ORIGIN}" > /dev/null 2>&1 && echo "deploy done."

  web-client-test-and-deploy:
    docker:
      - image: circleci/node:10-stretch-browsers

    working_directory: ~/workrec
    steps:
      - checkout

      - restore_cache:
          keys:
            - yarn-packages-{{ checksum "web-client/app/yarn.lock" }}

      - run: cd ./web-client/app && yarn install

      - save_cache:
          key: yarn-packages-{{ checksum "web-client/app/yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Run unit test
          command: |
            cd ./web-client
            sh ./scripts/build.sh && sh ./scripts/test.sh

      - run:
          name: Deploy client
          command: |
            sh ./web-client/scripts/build.sh && cd ./web-client/app && yarn run deploy --project=${GOOGLE_PROJECT_ID} --token=${FIREBASE_TOKEN} > /dev/null 2>&1 && echo "deploy done."

  android-client-test:
    working_directory: ~/workrec
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout

      - restore_cache:
          key: jars-{{ checksum "android-client/Workrec/build.gradle" }}-{{ checksum  "android-client/Workrec/app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: cd android-client/Workrec && ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/android-client/Workrec/.gradle
          key: jars-{{ checksum "android-client/Workrec/build.gradle" }}-{{ checksum  "android-client/Workrec/app/build.gradle" }}

      - run:
          name: Run Tests
          command: cd android-client/Workrec && ./gradlew lint test

      - store_artifacts:
          path: android-client/Workrec/app/build/reports
          destination: reports

      - store_test_results:
          path: android-client/Workrec/app/build/test-results

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - server-test-and-deploy
      - web-client-test-and-deploy
      - android-client-test
