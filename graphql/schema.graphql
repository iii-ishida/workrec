schema {
  query: RootQueryType
  mutation: RootMutationType
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type TaskActionEdge {
  node: TaskAction!
}

"""
The `Time` scalar type represents a time. The Time appears in a JSON
response as an ISO8601 formatted string, without a date component.
"""
scalar Time

type TaskActionConnection {
  pageInfo: PageInfo
  edges: [TaskActionEdge]
}

enum State {
  FINISHED
  RESUMED
  PAUSED
  STARTED
  UNSTARTED
}

"""
The `Date` scalar type represents a date. The Date appears in a JSON
response as an ISO8601 formatted string, without a time component.
"""
scalar Date

type RootMutationType {
  createTask(title: String!): Task
  updateTask(title: String!, id: ID!): Task
  deleteTask(id: ID!): Boolean
  startTask(time: DateTime!, id: ID!): Task
  pauseTask(time: DateTime!, id: ID!): Task
  resumeTask(time: DateTime!, id: ID!): Task
  finishTask(time: DateTime!, id: ID!): Task
  unfinishTask(time: DateTime!, id: ID!): Task
}

"""
The `Decimal` scalar type represents signed double-precision fractional
values parsed by the `Decimal` library.  The Decimal appears in a JSON
response as a string to preserve precision.
"""
scalar Decimal

type Task {
  id: ID!
  userId: ID!
  baseWorkingTime: DateTime
  pausedAt: DateTime
  startedAt: DateTime
  title: String!
  state: State!
  createdAt: DateTime!
  updatedAt: DateTime!
  actions(cursor: String, first: Int!): TaskActionConnection!
}

type RootQueryType {
  "Get all tasks"
  tasks(cursor: String, first: Int!): TaskConnection!

  "Get a task"
  task(id: ID!): Task
}

"""
The `Naive DateTime` scalar type represents a naive date and time without
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string.
"""
scalar NaiveDateTime

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC and any UTC offset other than 0 will be rejected.
"""
scalar DateTime

type TaskEdge {
  node: Task!
}

type TaskConnection {
  pageInfo: PageInfo
  edges: [TaskEdge]
}

type TaskAction {
  id: ID!
  userId: ID!
  taskId: ID!
  time: DateTime!
  type: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}
