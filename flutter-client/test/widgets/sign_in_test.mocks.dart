// Mocks generated by Mockito 5.0.16 from annotations
// in workrec_app/test/widgets/sign_in_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:workrec_app/auth_client/auth_client.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAuthUser_0 extends _i1.Fake implements _i2.AuthUser {}

/// A class which mocks [AuthClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthClient extends _i1.Mock implements _i2.AuthClient {
  MockAuthClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthUser get currentUser =>
      (super.noSuchMethod(Invocation.getter(#currentUser),
          returnValue: _FakeAuthUser_0()) as _i2.AuthUser);
  @override
  _i3.Stream<_i2.AuthUser> get userStream => (super.noSuchMethod(
      Invocation.getter(#userStream),
      returnValue: Stream<_i2.AuthUser>.empty()) as _i3.Stream<_i2.AuthUser>);
  @override
  _i3.Future<void> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#createUserWithEmailAndPassword, [],
              {#email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithEmailAndPassword, [],
              {#email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}
