// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/store.go

// Package store is a generated GoMock package.
package store

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/iii-ishida/workrec/server/command/model"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// RunTransaction mocks base method
func (m *MockStore) RunTransaction(arg0 func(Store) error) error {
	ret := m.ctrl.Call(m, "RunTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction
func (mr *MockStoreMockRecorder) RunTransaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockStore)(nil).RunTransaction), arg0)
}

// GetWork mocks base method
func (m *MockStore) GetWork(id model.WorkID, dst *model.Work) error {
	ret := m.ctrl.Call(m, "GetWork", id, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWork indicates an expected call of GetWork
func (mr *MockStoreMockRecorder) GetWork(id, dst interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockStore)(nil).GetWork), id, dst)
}

// PutWork mocks base method
func (m *MockStore) PutWork(w model.Work) error {
	ret := m.ctrl.Call(m, "PutWork", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutWork indicates an expected call of PutWork
func (mr *MockStoreMockRecorder) PutWork(w interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWork", reflect.TypeOf((*MockStore)(nil).PutWork), w)
}

// DeleteWork mocks base method
func (m *MockStore) DeleteWork(id model.WorkID) error {
	ret := m.ctrl.Call(m, "DeleteWork", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWork indicates an expected call of DeleteWork
func (mr *MockStoreMockRecorder) DeleteWork(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWork", reflect.TypeOf((*MockStore)(nil).DeleteWork), id)
}

// PutEvent mocks base method
func (m *MockStore) PutEvent(e model.Event) error {
	ret := m.ctrl.Call(m, "PutEvent", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutEvent indicates an expected call of PutEvent
func (mr *MockStoreMockRecorder) PutEvent(e interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvent", reflect.TypeOf((*MockStore)(nil).PutEvent), e)
}
